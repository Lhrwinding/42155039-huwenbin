The frist problem
class TreeNode:
    def __init__(self, s , d):
        self.vec = s  # feature vector
        self.Dimension = d  #Namely, the characteristic dimension when dividing the space
        self.left = None  # Left child node
        self.right = None  # Right child node
        self.father = None # Parent node (need to go back when searching)

    def __str__(self):
        return str(self.vec)  # When printing a Node class, its feature vector will be printed

def dis(arr1,arr2):
    res=0;
    for a,b in zip(arr1,arr2):
        res += (a-b)**2
    return res**0.5

def build(arr,l,father):
    if len(arr)==0: #Return if the sample space is empty
        return ;

    #Find the median of x ^ l and the corresponding eigenvector, that is, the median of arr [:] [l] and arr [x] [:]
    size = len(arr)
    # Sort the arr directly because it is convenient to get the eigenvector and partition the subspace捷
    # Sort the two-dimensional array with the sorting value of l column (ascending)：
    arr.sort(key=(lambda x:x[l]))

    mid = int((size-1)/2)

    root = TreeNode(arr[mid],l)
    root.father = father
    root.left=build(arr[0:mid],(l+1)%n,root)  #0:mid barring mid，Namely[0,mid)
    root.right=build(arr[mid+1:],(l+1)%n,root)
    # print(root,root.father)
    return root

def dfs(depth,root,father,stack):
    if root == None:
        return father;

    stack.append(root)

    if target[depth%n]<root.vec[depth%n]: #depth%n=l,lSuperscript for feature
        return dfs(depth + 1, root.left, root,stack)
    else :
        return dfs(depth+1,root.right,root,stack)
    return root;


Featureset=[[1,6,2],
            [2,9,3],
            [5,1,4],
            [9,4,7],
            [4,2,6],
            [6,3,5],
            [7,2,5],
            [9,1,4]]
n = len(Featureset[0][:]) #Dimension of feature (number)
Features = [1,3,4,2,5,5,2,7]
temp=Featureset

#Recursive construction of kd tree
root =build(temp,0,None)

#Search the kd tree in depth to find a current closest point
target = [1,4,5]
stack = []
nearest = dfs(0,root,root.father,stack) #Find the nearest neighbor
nearest_dis = dis(nearest.vec,target) #nearest_ Dis is the distance from the current nearest neighbor to the target, that is, the minimum distance, and the radius of the hypersphere

visited={} #Used to determine whether the brother node has been discussed


#Use stack for backtracking instead of recursion
while stack[-1]!=root:
    print('STACK:',end=' ')
    for i in stack : print(i,end=' ')
    print()

    #First define the current node cur, the parent node father, and the brother node bro
    cur = stack[-1]
    stack.pop();
    father = cur.father
    bro = father.left
    if father.left == cur:
        bro = father.right

    # If the distance between the current node and the target is less than the nearest distance, update the nearest node and the nearest distance
    if dis(cur.vec,target)<nearest_dis:
        nearest=cur
        nearest_dis=dis(cur.vec,target)

    # print(visited.get(hash(bro)))
    # The current node has not been recursed
    if visited.get(hash(cur))==None:
    # If the hypersphere and the hyperplane of the parent node intersect, there may be a closer node on the other side of the parent node, that is, the division of the sibling node
        if father.vec[father.Dimension]-target[father.Dimension] < nearest_dis:
            visited.update({hash(bro): 'yes'})
            dfs(father.Dimension,bro,father,stack)

print("Nearest distance：",nearest_dis)
print("Nearest neighbor：",nearest)
